函数格式
  func是关键字,多个参数列表之间可以用逗号（,）分隔，也可以没有参数
  使用箭头“->”指向返回值类型
  如果函数没有返回值，返回值为Void.并且“-> 返回值类型”部分可以省略

  func 函数名(参数列表) -> 返回值类型 {
      代码块
      return 返回值
  }

没有参数,没用返回值
  func about() -> Void {
      print("iphone6s plus")
  }
  或者
  func about1() -> () {
      print("iphone6s plus")
  }
  或者
  func about2() {
      print("iphone6s plus")
  }

有参数,没用返回值
  func callPhone(phoneNum : String) {
      print("打电话给\(phoneNum)")
  }

没用参数,有返回值
  func readMessage() -> String {
      return "吃饭了吗?"
  }

有参数,有返回值
  func sum(num1 : Int, num2 : Int) -> Int {
      return num1 + num2
  }

外部参数和内部参数
  在函数内部可以看到的参数,就是内部参数
  在函数外面可以看到的参数,就是外部参数
  默认情况下,从第二个参数开始,参数名称既是内部参数也是外部参数
  如果第一个参数也想要有外部参数,可以设置标签:在变量名前加标签即可
  如果不想要外部参数,可以在参数名称前加_

  // num1和a是外部参数的名称
  func ride(num1 num1 : Int, a num2 : Int, b num3 : Int) -> Int {
      return num1 * num2 * num3
  }
  var result1 = ride(num1: 20, a: 4, b: 5)

  // 方法的重载:方法名称相同,但是参数不同,可以称之为方法的重载(了解)
  func ride(num1: Int, _ num2 :Int) -> Int {
      return num1 * num2
  }
  var result2 = ride(20, 20)

默认参数
  某些情况,如果没有传入具体的参数,可以使用默认参数
  func makecoffee(type :String = "卡布奇诺") -> String {
      return "制作一杯\(type)咖啡。"
  }
  let coffee1 = makecoffee("拿铁")
  let coffee2 = makecoffee()

可变参数
  swift中函数的参数个数可以变化，它可以接受不确定数量的输入类型参数
  它们必须具有相同的类型
  我们可以通过在参数类型名后面加入（...）的方式来指示这是可变参数

  func sum(numbers:Double...) -> Double {
      var total: Double = 0
      for number in numbers {
          total += number
      }
      return total
  }
  sum(100.0, 20, 30)

引用类型(指针的传递)
  默认情况下,函数的参数是值传递.如果想改变外面的变量,则需要传递变量的地址
  必须是变量,因为需要在内部改变其值
  Swift提供的inout关键字就可以实现

  // 值传递
  func swap(var a : Int, var b : Int) {
      let temp = a;
      a = b;
      b = temp
  }
  swap(a, b: b)

  // 指针传递
  func swap1(inout a : Int, inout b : Int) {
      let temp = a
      a = b
      b = temp
  }
  swap1(&a, b: &b)

函数的嵌套使用
  swift中函数可以嵌套使用
  嵌套的函数只能在内部使用
  即函数中包含函数,但是不推荐该写法

  let value = 55
  func test() {
      func demo() {
          print("demo \(value)")
      }
      print("test")
      demo()
  }

定义全局函数
  只要在类之外声明的函数就都是全局函数
  可以在其他文件中调用,也不需要import定义的那个swift文件

private标识的方法在当前文件中可以访问,但是其他文件不能访问