在OC中字符串类型时NSString,在Swift中字符串类型是String
OC中字符串@"",Swift中字符串""
String 是一个结构体，性能更高
NSString 是一个 OC 对象，性能略差
String 支持直接遍历
Swift 提供了 String 和 NSString 之间的无缝转换

字符、字符串也能使用区间运算符，但默认不能用在for-in中
  let stringRange1 = "cc"..."ff" // ClosedRange<String> 
  stringRange1.contains("cb") // false 
  stringRange1.contains("dz") // true 
  stringRange1.contains("fg") // false
  // 这里range类型依旧是ClosedRange<String>,如果想表示字符类型一定要显示指定类型为Character
  let stringRange2 = "a"..."f" 
  stringRange2.contains("d") // true 
  stringRange2.contains("h") // false

  // \0到~囊括了所有可能要用到的ASCII字符 
  let characterRange: ClosedRange<Character> = "\0"..."~" 
  characterRange.contains("G") // true

遍历字符串  
  var str = "Hello, Swift"
  for c in str.characters {
      print(c)
  }

字符串拼接
  两个字符串的拼接
    let str1 = "Hello"
    let str2 = "World"
    let str3 = str1 + str2
  字符串和其他数据类型的拼接
    let name = "why"
    let age = 18
    let info = "my name is \(name), age is \(age)"
  字符串的格式化
    let min = 3
    let second = 4
    let time = String(format: "%02d:%02d", arguments: [min, second])

字符串截取
  Swift中提供了特殊的截取方式
    该方式非常麻烦
    Index创建较为麻烦
  简单的方式是将String转成NSString来使用
  在标识符后加:as NSString即可
    let myStr = "www.520it.com"
    var subStr = (myStr as NSString).substringFromIndex(4)
    subStr = (myStr as NSString).substringToIndex(3)
    subStr = (myStr as NSString).substringWithRange(NSRange(location: 4, length: 5))

字符串创建类
  不可以直接通过类型来获取对应的类
  因为Swift有命名空间,类前需要加上命名空间的名称

  获取命名空间的名称
    let executable = NSBundle.mainBundle().infoDictionary!["CFBundleExecutable"] as? String
  
  通过字符串创建对象
    获取类的名称
    获取类的真实类型
    创建对应类的对象
    // 1.获取对应的类
    guard let childVcClass : AnyClass = NSClassFromString(executable + "." + childCVcName) else {
        XMGLog("转成对应的类失败")
        return
    }
    // 2.拿到对应的类
    let childClass = childVcClass as! UITableViewController.Type
    let childVc = childClass.init()
  
