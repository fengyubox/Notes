导入框架 
  import UIKit

// MARK:- 注释 就等同于OC中的#pragma mark
/// 注释  对于属性或方法用这种方法注释,在调用时就会看到相关注释提示

定义标识符时，必须声明该标识符是变量还是常量
使用let来定义常量,定义之后不可以修改
使用var来定义变量,定义之后可以修改
声明标识符的格式: 变量/常量关键字 名称 : 数据类型
注意:
  在真实使用过程中,建议先定义常量,如果需要修改再修改为变量(更加安全)
  是指向的对象不可以再进行修改.但是可以通过指针获得对象后,修改对象内部的属性

枚举类型的用法:类型.枚举的值或者直接.枚举
  UIButtonType.Custom
  .Custom

swift对象中不需要*
  var view : UIView = UIView()

语句结束时不需要加;
如果同一行有多个语句,则依然需要加
但是不建议一行多条语句

Swift中的打印语句:print(打印的内容)

整型
  有符号
    Int8 : 有符号8位整型
    Int16 : 有符号16位整型
    Int32 : 有符号32位整型
    Int64 : 有符号64位整型
    Int : 和平台相关(默认,相当于OC的NSInteger)
  无符号
    UInt8 : 无符号8位整型
    UInt16 : 无符号16位整型
    UInt32 : 无符号32位整型
    UInt64 : 无符号64位整型
    UInt : 和平台相关(常用,相当于OC的NSUInteger)(默认)

浮点型
  Float : 32位浮点型
  Double : 64浮点型(默认)

类型推导
  Swift是强类型的语言
  Swift中任何一个标识符都有明确的类型
  注意:
    如果定义一个标识符时有直接进行赋值,那么标识符后面的类型可以省略.
    因为swift有类型推导,会自动根据后面的赋值来决定前面的标识符的数据类型
    可以通过option+鼠标左键来查看变量的数据类型

基本运算
  Swift中在进行基本运算时必须保证类型一致,否则会出错
    相同类型之间才可以进行运算
    因为Swift中没有隐式转换
  数据类型的转化
    Int类型转成Double类型:Double(标识符)
    Double类型转成Int类型:Int(标识符)

逻辑分支
  if分支语句
    判断句可以不加()
    在Swift的判断句中必须有明确的真假
      不再有非0即真
      必须有明确的Bool值
      Bool有两个取值:false/true

    if score < 60 {
        print("不及格")
    } else if score <= 90 {
        print("优秀")
    } else {
        print("完美")
    }
  
  三目运算符
    var result = a > b ? a : b
  
  guard
    guard语句必须带有else语句，它的语法如下：
      当条件表达式为true时候跳过else语句中的内容，执行语句组内容
      条件表达式为false时候执行else语句中的内容，跳转语句一般是return、break、continue和throw
    
    guard 条件表达式 else {
        // 条换语句
        break
    }

switch分支
  switch后可以不跟()
  case后可以不跟break(默认会有break)
  一个case判断中,可以判断多个值,多个值以,隔开
  如果希望出现之前的case穿透,则可以使用关键字fallthrough

  switch sex {
  case 0:
      fallthrough
  case 1:
      print("正常人")
  default:
      print("其他")
  }

  支持多种数据类型
    浮点型
      let f = 3.14
      switch f {
      case 3.14:
          print("π")
      default:
          print("not π")
      }
    字符串类型
      let opration = "+"
      switch opration {
      case "+":
          result = m + n
      default:
          result = 0
      }

  支持区间判断
    swift中的区间常见有两种
      开区间:0..<10 表示:0~9,不包括10
      闭区间:0...10 表示:0~10
    
    switch score {
    case 0..<60:
        print("不及格")
    case 90..<100:
        print("优秀")
    default:
        print("满分")
    }

循环
  for循环
    最常规写法
      for var i = 0; i < 10; i++ {
          print(i)
      }
    区间for循环
      for i in 0..<10 {
          print(i)
      }

      for i in 0...10 {
          print(i)
      }
    特殊写法
      如果在for循环中不需要用到下标i
      for _ in 0..<10 {
          print("hello")
      }

  while和do while循环
    while的判断句必须有正确的真假,没有非0即真
    while后面的()可以省略

    var a = 0
    while a < 10 {
        a++
    }

    do while循环
    使用repeat关键字来代替了do
    let b = 0
    repeat {
        print(b)
        b++
    } while b < 20