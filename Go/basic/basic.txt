GOROOT: SDK安装的目录
GOPATH: go源代码存放的目录
GOBIN: 将来编译的可执行程序存放的目录,GOBIN目录,必须放在GOPATH目录里面

go env // 查看go配置的环境变量

unsafe.Sizeof(int(0)) // 查看数据类型占用的内存大小

占位符使用
    %T 数据类型
    %t 布尔类型

全局变量定义了没有使用不会报错,定义常量没有使用不会报错

常量组中,如果常量没有赋值,默认值就是上一行取值
const(
    a = 666
    b = 789
    c  // 789
)

退化赋值
如果通过:=定义多个变量,但是多个变量中有的变量已经在前面定义过了,那么:=就只会做赋值操作,不会做定义操作
num := 123
num, value := 456, 789  // 结果为456, 789

GO语言中没有隐式转换,且不能对一个常量进行强制转换
var num float64 = 3.14
var value int = int(num)

GO语言中必须类型完全一样,才可以赋值(例如int32也不可转为int8)
但是有特殊情况
    1. byte -> uint8
    2. rune -> int32
bool类型不能强制转换为整形

strconv.FormatXxx() // 将基本数据类型转为字符串类型
strconv.Itoa() // 将int整形转换为字符串类型
strconv.ParseXxx() // 将字符串类型转为基本数据类型
strconv.Atoi() // 将字符串类型转为int整形

如果常量组中的iota被打断,但是后续又被恢复,那么前面有多少行就会递增多少
const(
    male = iota // 0
    female = 666
    yao = iota // 2
)

fmt.Scanf(格式化字符串, 地址列表) // 如果接收的不是字符串类型(%c),会忽略空格和TAB,但是不会忽略回车
fmt.Scanln(地址列表) // 如果接收的不是字符串类型(%c),会忽略空格和TAB,但是不会忽略回车
fmt.Scan(地址列表) // 如果接收的不是字符串类型(%c),会忽略空格,TAB,回车