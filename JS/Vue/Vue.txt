Vue基本结构
    <!--1. 引入Vue框架-->
    <script src="js/vue.js"></script>

    <!--这个被Vue实例控制的区域, 就是MVVM中的V(View)-->
    <div id="app">
        <!--{{}}就是过去学习的模板引擎中插入值的语法
            代表从Model中获取msg的值, 将这个值插入到P标签中
        -->
        <p>{{ msg }}</p>
    </div>

    <script>
        // 2. 创建一个Vue实例对象
        // 这个实例对象就是MVVM中的VM(V和M通讯的对象/调度者)
        var vm = new Vue({
            // el就是告诉Vue实例对象, 将来要控制页面上的哪个区域
            el: '#app',
            // data就是告诉Vue被控制的区域中有哪些数据
            // 这里的data就是MVVM中的M(数据)
            data: {
                msg: '指趣学院'
            }
        });
    </script>

Vue单向和双向数据绑定
    1. 什么是数据的单向绑定?
        将Model中的数据渲染到界面上 Model-->VM-->View
        默认就是单向绑定, 并且只要数据发生变化, 界面就会自动发生变化
        通过数据驱动界面的更新和展示

    2. 什么是数据的双向绑定?
        将Model中的数据渲染到界面上 Model-->VM-->View
        将界面上更新的数据重新保存到Model中 View-->VM-->Model
    
    在Vue中只有表单元素能够创建双向的绑定
    你可以用v-model指令在表单 <input>、<textarea>及<select> 元素上创建双向数据绑定
    v-model="需要绑定的数据", 只要这样写完之后数据就可以从Model-->View, 也可以从View-->Model

    <div id="app">
        <p>{{msg}}</p>
        <input type="text" v-model="msg">
    </div>

Vue常用指令
    Vue提供了一套v-前缀开头的特殊特性(HTML属性, 类似于src/style/id/class)
    可以让Vue对一个DOM元素做各种操作

    v-once
        只渲染元素和组件一次
        应用场景: 不想让View随着Model的变化而变化, 就可以使用v-once

        <div id="app">
            <!--只会被渲染一次, 不会随着Model的变化而变化-->
            <p v-once>原始数据: {{msg}}</p>
            <!--会被渲染N次, 只要Model变化就会重新渲染-->
            <p>非原始数据: {{msg}}</p>
            <input type="text" v-model="msg">
        </div>

    v-cloak
        这个指令保持在元素上直到关联实例结束编译
        和CSS规则如[v-cloak] { display: none }一起用时

        Vue绑定数据的过程
            1. 显示原始的界面
            2. vue会根据data中的数据, 和控制区域中编写的模板来生成HTML
            3. 将生成的HTML渲染到界面上
            正是因为有这么一个过程, 所以在还未完成模板编译和渲染的时候, 用户会看到原始界面

        <style>
            [v-cloak] { display: none }
        </style>
        <div id="app">
            <p v-cloak>{{msg}}</p>
        </div>
    
    v-text-html
        v-text: 相当于js中的innerText
        v-html: 相当于js中的innerHTML

        <!--插值: 会将Model中指定的数据插入到指定的位置,不会覆盖其它的内容-->
        <p>+++++{{msg1}}++++++</p>
        <!--v-text: 会利用Model中指定的数据覆盖原有的数据-->
        <p v-text="msg1">原始数据</p>
        <!--v-html: 会利用Model中指定的数据覆盖原有的数据并会解析HTML-->
        <p v-html="msg2">原始数据</p>

        let vm = new Vue({
            el: '#app',
            data: {
                msg1: '指趣学院',
                msg2: '<span>我是span</span>'
            }
        });
    
    v-if
        根据表达式的真假来添加或者删除元素
        格式: v-if="条件表达式"
        特点:
            1. 如果条件表达式为假, 根本就不会创建这个元素
            2. 条件表达式的值除了可以从Model中获取以外, 还可以编写js代码, 只要是返回true/false的表达式即可

        <p v-if="true">显示</p>
        <p v-if="show">显示</p>
        <p v-if="age > 18">显示</p>

        let vm = new Vue({
            el: '#app',
            data: {
                msg: '指趣学院',
                show: true,
                hide: false,
                age: 19
            }
        });

    v-else
        v-else指令不能单独出现, 必须配合v-if使用
        在配合v-if使用的时候, 必须紧随其后, 中间不能插入其它语句
        v-if后面需要跟上条件表达式, v-else后面不需要跟上任何内容

        <p v-if="age > 18">大于18岁</p>
        <!--<p>我是插入的内容</p> 此时就会报错-->
        <p v-else>小于等于18岁</p>

    v-else-if
        注意点和v-else一样
        前面必须是v-if或者v-else-if
        中间不能被打断, 不能插入其它的数据

        <p v-if="score >= 90">优秀</p>
        <p v-else-if="score >= 70">良好</p>
        <p v-else-if="score >= 60">及格</p>
        <p v-else>努力</p>

    v-show
        根据表达式之真假值，切换元素的display CSS属性
        v-show和v-if的用于控制元素显示或者隐藏的区别
            v-show: 无论是否显示都会创建元素(因为是通过元素display样式来控制的)
            v-if:   不显示就不会创建
        应用场景: v-if由于每次显示都会重新创建, 所以性能消耗会稍微大一些
        如果企业开发中一个元素需要频繁的切换显示状态, 那么建议使用v-show

        <p v-show="show">我是段落111111</p>
        <p v-show="hide">我是段落222222</p>
        <p v-show="age > 18">我是段落33333</p>

        let vm = new Vue({
            el: '#app',
            data: {
                msg: '指趣学院',
                show: true,
                hide: false,
                age: 19
            }
        });
    
    v-for
        基于源数据多次渲染元素或模板块
        类似于JS中的forin循环

        <li v-for="(value, index) in [2, 4, 6, 8, 10]">index = {{index}}, value = {{value}}</li>
        
        let vm = new Vue({
            el: '#app',
            data: {
                msg: '指趣学院',
                list: [1, 3, 5, 7, 9]
            }
        });