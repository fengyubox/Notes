jQuery和JS入口函数的区别
    原生JS会等到DOM元素加载完毕,并且图片也加载完毕才会执行
        window.onload = function (ev) { }
    jQuery会等到DOM元素加载完毕,但不会等到图片也加载完毕就会执行,所以获取不到图片的宽高
        $(document).ready(function () { });

    原生的JS如果编写了多个入口函数,后面编写的会覆盖前面编写的
    jQuery中编写多个入口函数,后面的不会覆盖前面的

jQuery入口函数的写法
    1. $(document).ready(function () { });
    2. jQuery(document).ready(function () { });
    3. $(function () { }); // 推荐
    4. jQuery(function () { });

jQuery冲突问题
    当其他库也使用$时
    1. 释放$的使用权
        注意点: 释放操作必须在编写其它jQuery代码之前编写
                释放之后就不能再使用$,改为使用jQuery
                jQuery.noConflict();
    2. 自定义一个访问符号
        var nj = jQuery.noConflict();
        nj(function () {
            alert("hello lnj");
        });

jQuery核心函数
    $()就代表调用jQuery的核心函数
    1. 接收一个函数
        $(function () {
            alert("hello lnj");
        });
    2. 接收一个字符串
        1. 接收一个字符串选择器
            返回一个jQuery对象, 对象中保存了找到的DOM元素
            var $box1 = $(".box1");
        2. 接收一个字符串代码片段
            返回一个jQuery对象, 对象中保存了创建的DOM元素
            var $p = $("<p>我是段落</p>");
            $box1.append($p);
    3. 接收一个DOM元素
        会被包装成一个jQuery对象返回给我们
        var span = document.getElementsByTagName("span")[0];
        var $span = $(span);

jQuery对象
    jQuery对象是一个伪数组
    有0到length-1的属性, 并且有length属性

jQuery静态方法
    each
        原生的forEach方法只能遍历数组, 不能遍历伪数组
        利用jQuery的each静态方法遍历数组
            jQuery的each方法是可以遍历伪数组的
            第一个参数: 当前遍历到的索引
            第二个参数: 遍历到的元素
            var obj = {0:1, 1:3, 2:5, 3:7, 4:9, length:5}; // 定义一个伪数组
            $.each(obj, function (index, value) {
                console.log(index, value);
            });
    map
        原生的map方法不能遍历的伪数组
        利用jQuery的map静态方法遍历数组
            jQuery的map方法是可以遍历伪数组的
            第一个参数: 要遍历的数组
            第二个参数: 每遍历一个元素之后执行的回调函数
            回调函数的参数:
            第一个参数: 遍历到的元素
            第二个参数: 遍历到的索引
            var res = $.map(obj, function (value, index) {
                console.log(index, value);
                return value + index;
            });
    
    jQuery中的each静态方法和map静态方法的区别:
        each静态方法默认的返回值就是, 遍历谁就返回谁
        map静态方法默认的返回值是一个空数组

        each静态方法不支持在回调函数中对遍历的数组进行处理
        map静态方法可以在回调函数中通过return对遍历的数组进行处理, 然后生成一个新的数组返回

    trim
        作用: 去除字符串两端的空格
        参数: 需要去除空格的字符串
        返回值: 去除空格之后的字符串
        var str = "    lnj    ";
        var res = $.trim(str);

    isWindow
        作用: 判断传入的对象是否是window对象
        返回值: true/false
        var w = window;
        var res = $.isWindow(w);

    isArray
        作用: 判断传入的对象是否是真数组
        返回值: true/false
        var res = $.isArray(w);

    isFunction
        作用: 判断传入的对象是否是一个函数
        返回值: true/false
        注意点:
            jQuery框架本质上是一个函数
        var res = $.isFunction(jQuery);

    holdReady
        作用: 暂停ready执行
        $.holdReady(true);
        $(document).ready(function () {
            alert("ready");
        });

        var btn = document.getElementsByTagName("button")[0];
        btn.onclick = function () {
            $.holdReady(false); // 传入false代表恢复执行
        }

jQuery内容选择器
    :empty 
        作用:找到既没有文本内容也没有子元素的指定元素
        var $div = $("div:empty");

    :parent 
        作用: 找到有文本内容或有子元素的指定元素
        var $div = $("div:parent");
    
    :contains(text) 
        作用: 找到包含指定文本内容的指定元素
        var $div = $("div:contains('我是div')");
    
    :has(selector) 
        作用: 找到包含指定子元素的指定元素
        var $div = $("div:has('span')");
    
属性和属性节点
    属性
        对象身上保存的变量就是属性
        如何操作属性
            对象.属性名称 = 值;
            对象.属性名称;
            对象["属性名称"] = 值;
            对象["属性名称"];
    
    属性节点
        在编写HTML代码时,在HTML标签中添加的属性就是属性节点
        在浏览器中找到span这个DOM元素之后, 展开看到的都是属性
        在attributes属性中保存的所有内容都是属性节点
        如何操作属性节点    
            DOM元素.setAttribute("属性名称", "值");
            DOM元素.getAttribute("属性名称");

    任何对象都有属性, 但是只有DOM对象才有属性节点

attr(name|pro|key,val|fn)
    作用: 获取或者设置属性节点的值
    可以传递一个参数, 也可以传递两个参数
    如果传递一个参数, 代表获取属性节点的值 $("span").attr("class")
    如果传递两个参数, 代表设置属性节点的值 $("span").attr("class", "box");

    注意点:
        如果是获取:无论找到多少个元素, 都只会返回第一个元素指定的属性节点的值
        如果是设置:找到多少个元素就会设置多少个元素
        如果是设置:如果设置的属性节点不存在,那么系统会自动新增

removeAttr
    删除属性节点
    注意点:
        会删除所有找到元素指定的属性节点
    $("span").removeAttr("class name") // 删除多个用空格隔开

prop
    特点和attr方法一致
    $("span").eq(0).prop("demo", "it666");
    $("span").prop("demo")

removeProp
    特点和removeAttr方法一致
    $("span").removeProp("demo");

官方推荐在操作属性节点时,具有true和false两个属性的属性节点，
如checked,selected或者disabled使用prop(),其他的使用attr()

jQuery操作类相关的方法
    addClass(class|fn)
        作用: 添加一个类
        如果要添加多个,多个类名之间用空格隔开即可
        $("div").addClass("class1 class2");

    removeClass([class|fn])
        作用: 删除一个类
        如果想删除多个,多个类名之间用空格隔开即可
        $("div").removeClass("class2 class1");

    toggleClass(class|fn[,sw])
        作用: 切换类
        有就删除,没有就添加
        $("div").toggleClass("class2 class1");

